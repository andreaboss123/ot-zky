#!/usr/bin/env python3
"""
Skript pro generov√°n√≠ Word dokumentu (.docx) s maturitn√≠mi ot√°zkami z Markdown souboru.
Script for generating Word document (.docx) with maturita questions from Markdown file.
"""

import os
import re
from docx import Document
from docx.shared import Pt, Cm, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH, WD_LINE_SPACING
from docx.oxml.ns import qn
from docx.oxml import OxmlElement


def set_page_margins(section, margin=2.5):
    """Nastav√≠ okraje str√°nky / Set page margins"""
    section.top_margin = Cm(margin)
    section.bottom_margin = Cm(margin)
    section.left_margin = Cm(margin)
    section.right_margin = Cm(margin)


def add_page_number(section):
    """P≈ôid√° ƒç√≠slov√°n√≠ str√°nek / Add page numbering"""
    footer = section.footer
    footer_para = footer.paragraphs[0]
    footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    run = footer_para.add_run()
    fldChar1 = OxmlElement('w:fldChar')
    fldChar1.set(qn('w:fldCharType'), 'begin')
    
    instrText = OxmlElement('w:instrText')
    instrText.set(qn('xml:space'), 'preserve')
    instrText.text = "PAGE"
    
    fldChar2 = OxmlElement('w:fldChar')
    fldChar2.set(qn('w:fldCharType'), 'end')
    
    run._r.append(fldChar1)
    run._r.append(instrText)
    run._r.append(fldChar2)
    
    run.font.size = Pt(12)
    run.font.name = 'Times New Roman'


def set_font(run, font_name='Times New Roman', size=12, bold=False):
    """Nastav√≠ font / Set font"""
    run.font.name = font_name
    run.font.size = Pt(size)
    run.font.bold = bold
    # Nastaven√≠ pro kompatibilitu s r≈Øzn√Ωmi verzemi Word
    run._element.rPr.rFonts.set(qn('w:eastAsia'), font_name)


def create_title_page(doc):
    """Vytvo≈ô√≠ tituln√≠ stranu / Create title page"""
    # Tituln√≠ strana
    title = doc.add_paragraph()
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    title_run = title.add_run('\n\n\n\n\nMaturitn√≠ ot√°zky\n')
    set_font(title_run, size=24, bold=True)
    
    subtitle = doc.add_paragraph()
    subtitle.alignment = WD_ALIGN_PARAGRAPH.CENTER
    subtitle_run = subtitle.add_run('√öƒçetnictv√≠\n')
    set_font(subtitle_run, size=20, bold=True)
    
    subtitle2 = doc.add_paragraph()
    subtitle2.alignment = WD_ALIGN_PARAGRAPH.CENTER
    subtitle2_run = subtitle2.add_run('ƒåesk√° republika')
    set_font(subtitle2_run, size=16)
    
    # Konec tituln√≠ strany - nov√° str√°nka
    doc.add_page_break()


def create_table_of_contents(doc, chapters):
    """Vytvo≈ô√≠ obsah / Create table of contents"""
    toc_title = doc.add_paragraph()
    toc_run = toc_title.add_run('Obsah')
    set_font(toc_run, size=16, bold=True)
    toc_title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    doc.add_paragraph()
    
    for i, chapter_title in enumerate(chapters, 1):
        toc_entry = doc.add_paragraph()
        toc_run = toc_entry.add_run(f'{i}. {chapter_title}')
        set_font(toc_run)
        toc_entry.paragraph_format.line_spacing_rule = WD_LINE_SPACING.ONE_POINT_FIVE
    
    doc.add_page_break()


def parse_markdown(md_file):
    """Parsuje Markdown soubor a vrac√≠ seznam kapitol / Parse Markdown file and return list of chapters"""
    with open(md_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Rozdƒõlen√≠ na kapitoly podle ## nadpis≈Ø
    chapters = []
    current_chapter = None
    
    for line in content.split('\n'):
        if line.startswith('## '):
            if current_chapter:
                chapters.append(current_chapter)
            current_chapter = {
                'title': line[3:].strip(),
                'content': []
            }
        elif current_chapter is not None:
            current_chapter['content'].append(line)
    
    if current_chapter:
        chapters.append(current_chapter)
    
    return chapters


def add_chapter(doc, chapter_num, chapter):
    """P≈ôid√° kapitolu do dokumentu / Add chapter to document"""
    # STR√ÅNKA 1: Pouze ot√°zka (vycentrovan√°)
    # Question page - centered and prominent
    question_para = doc.add_paragraph()
    question_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # P≈ôid√°n√≠ vertik√°ln√≠ho prostoru p≈ôed ot√°zkou
    for _ in range(8):
        doc.add_paragraph()
    
    # Samotn√° ot√°zka
    question_heading = doc.add_paragraph()
    question_heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
    question_run = question_heading.add_run(f'{chapter_num}. {chapter["title"]}')
    set_font(question_run, size=16, bold=True)
    question_heading.paragraph_format.line_spacing_rule = WD_LINE_SPACING.ONE_POINT_FIVE
    
    # Nov√° str√°nka pro odpovƒõƒè
    doc.add_page_break()
    
    # STR√ÅNKA 2: Odpovƒõƒè
    # Answer page with content
    # Nadpis odpovƒõdi (men≈°√≠ ne≈æ ot√°zka)
    answer_heading = doc.add_paragraph()
    answer_heading_run = answer_heading.add_run(f'Odpovƒõƒè {chapter_num}:')
    set_font(answer_heading_run, size=14, bold=True)
    answer_heading.paragraph_format.line_spacing_rule = WD_LINE_SPACING.ONE_POINT_FIVE
    
    doc.add_paragraph()
    
    # Obsah odpovƒõdi
    content_text = '\n'.join(chapter['content']).strip()
    
    # Rozdƒõlen√≠ na odstavce
    paragraphs = content_text.split('\n\n')
    
    for para_text in paragraphs:
        if para_text.strip():
            # Odstranen√≠ markdown form√°tov√°n√≠
            para_text = re.sub(r'\*\*(.*?)\*\*', r'\1', para_text)  # bold
            para_text = re.sub(r'\*(.*?)\*', r'\1', para_text)  # italic
            
            para = doc.add_paragraph()
            para_run = para.add_run(para_text.strip())
            set_font(para_run)
            para.paragraph_format.line_spacing_rule = WD_LINE_SPACING.ONE_POINT_FIVE
            para.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
    
    # Nov√° str√°nka po odpovƒõdi
    doc.add_page_break()


def generate_document(md_file, output_file):
    """Hlavn√≠ funkce pro generov√°n√≠ dokumentu / Main function for document generation"""
    print(f'Naƒç√≠t√°m Markdown soubor: {md_file}')
    
    # Kontrola existence souboru
    if not os.path.exists(md_file):
        print(f'CHYBA: Soubor {md_file} neexistuje!')
        print('Vytvo≈ôte pros√≠m soubor docs/src/otazky.md s obsahem ot√°zek.')
        return False
    
    # Parsov√°n√≠ Markdown
    chapters = parse_markdown(md_file)
    
    if not chapters:
        print('CHYBA: V Markdown souboru nebyly nalezeny ≈æ√°dn√© kapitoly!')
        print('Pou≈æijte ## pro oznaƒçen√≠ kapitol, nap≈ô: ## 1. Ot√°zka')
        return False
    
    print(f'Nalezeno {len(chapters)} kapitol')
    
    # Vytvo≈ôen√≠ dokumentu
    doc = Document()
    
    # Nastaven√≠ okraj≈Ø
    for section in doc.sections:
        set_page_margins(section)
    
    # Tituln√≠ strana
    print('Generuji tituln√≠ stranu...')
    create_title_page(doc)
    
    # Obsah
    print('Generuji obsah...')
    chapter_titles = [ch['title'] for ch in chapters]
    create_table_of_contents(doc, chapter_titles)
    
    # Nastaven√≠ ƒç√≠slov√°n√≠ str√°nek od t√©to str√°nky (po obsahu)
    section = doc.sections[-1]
    add_page_number(section)
    
    # Kapitoly
    print('Generuji kapitoly...')
    for i, chapter in enumerate(chapters, 1):
        print(f'  - Kapitola {i}: {chapter["title"]}')
        add_chapter(doc, i, chapter)
    
    # Ulo≈æen√≠ dokumentu
    print(f'Ukl√°d√°m dokument: {output_file}')
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    doc.save(output_file)
    
    print('‚úÖ Dokument byl √∫spƒõ≈°nƒõ vygenerov√°n!')
    print(f'üìÑ V√Ωstupn√≠ soubor: {output_file}')
    return True


if __name__ == '__main__':
    # Cesty k soubor≈Øm
    script_dir = os.path.dirname(os.path.abspath(__file__))
    repo_root = os.path.dirname(script_dir)
    
    md_file = os.path.join(repo_root, 'docs', 'src', 'otazky.md')
    output_file = os.path.join(repo_root, 'output', 'maturitni_otazky_ucetnictvi.docx')
    
    print('=' * 60)
    print('Gener√°tor maturitn√≠ch ot√°zek - √öƒçetnictv√≠ (ƒåR)')
    print('=' * 60)
    print()
    
    success = generate_document(md_file, output_file)
    
    if not success:
        exit(1)
